<?xml version="1.0" encoding="UTF-8"?>
<!-- JGraLab - The Java Graph Laboratory                                      -->
<!--                                                                          -->
<!-- Copyright (C) 2006-2014 Institute for Software Technology                -->
<!--                         University of Koblenz-Landau, Germany            -->
<!--                         ist@uni-koblenz.de                               -->
<!--                                                                          -->
<!-- For bug reports, documentation and further information, visit            -->
<!--                                                                          -->
<!--                         https://github.com/jgralab/jgralab               -->
<!--                                                                          -->
<!-- This program is free software; you can redistribute it and/or modify it  -->
<!-- under the terms of the GNU General Public License as published by the    -->
<!-- Free Software Foundation; either version 3 of the License, or (at your   -->
<!-- option) any later version.                                               -->
<!--                                                                          -->
<!-- This program is distributed in the hope that it will be useful, but      -->
<!-- WITHOUT ANY WARRANTY; without even the implied warranty of               -->
<!-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General -->
<!-- Public License for more details.                                         -->
<!--                                                                          -->
<!-- You should have received a copy of the GNU General Public License along  -->
<!-- with this program; if not, see <http://www.gnu.org/licenses>.            -->
<!--                                                                          -->
<!-- Additional permission under GNU GPL version 3 section 7                  -->
<!--                                                                          -->
<!-- If you modify this Program, or any covered work, by linking or combining -->
<!-- it with Eclipse (or a modified version of that program or an Eclipse     -->
<!-- plugin), containing parts covered by the terms of the Eclipse Public     -->
<!-- License (EPL), the licensors of this Program grant you additional        -->
<!-- permission to convey the resulting work.  Corresponding Source for a     -->
<!-- non-source form of such a combination shall include the source code for  -->
<!-- the parts of JGraLab used as well as that of the covered work.           -->

<project name="jgralab" basedir="." default="build">

	<!-- override default properties -->
	<property name="projectname" value="jgralab" />
	<property name="main" value="JGraLab" />
	<property name="documentexcludes" value="de.uni_koblenz.jgralab.greql.schema.*,de.uni_koblenz.jgralab.grumlschema.*,de.uni_koblenz.jgralab.plugin.*" />
	<property name="unjarexcludes" value="clover/** apache/ant/** junit/**" />
	<property name="test.suite" value="de.uni_koblenz.jgralabtest.RunTests" />
	<property name="manifest.static" value="true" />

	<!-- TODO: Currently the greqltest won't compile -->
	<property name="testcompileexcludes" value="de/uni_koblenz/jgralabtest/greql/**" />

	<!-- import the common build file -->
	<import file="common.xml" />

	<property name="license.file" value="../jgralab/license-header/gpl-3.0-header.txt" />

	<property file="${testcases.dir}/jgralabtest.properties" />

	<!-- enable clover for the testcases:
	     run with "$ ant with.clover build test clover.html" -->
	<property name="clover.jar" value="${lib.dir}/clover/clover-3.1.3.jar" />
	<taskdef resource="cloverlib.xml" classpath="${clover.jar}" />

	<target name="with.clover">
		<clover-setup />
	</target>

	<target name="clover.html">
		<clover-report>
			<current outfile="${project.dir}/build/clover-report" title="JGraLab">
				<format type="html" />
				<!-- What to include/exclude from the report (include
	           everything except the generated schema classes in
	           src/. -->
				<fileset dir="${src.dir}" includes="**/*.java" excludes="de/uni_koblenz/jgralab/grumlschema/**/*.java de/uni_koblenz/jgralab/greql/schema/**/*.java de/uni_koblenz/jgralab/gretl/template/**/*.java" />
				<fileset dir="${testcases.dir}" includes="**/*.java" />
				<!-- Where are the test classes (listed separately in
	           the report) -->
				<testsources dir="${testcases.dir}" includes="**/*.java" />
			</current>
		</clover-report>
		<!-- After generating the report, delete the clover db and its
		     clover record files. -->
		<clover-clean />
	</target>


	<!-- classpath additions -->
	<!-- here all needed common libs are included -->
	<path id="classpathExtension">
		<fileset dir="${lib.dir}/apache/commons/cli/" includes="**/*.jar" />
		<fileset dir="${lib.dir}/apache/ant" includes="**/*.jar" />
		<fileset dir="${lib.dir}/junit/" includes="**/*.jar" />
		<pathelement path="${clover.jar}" />
	</path>

	<!-- set project specific properties -->

	<property name="greql.schemafile" value="${src.dir}/de/uni_koblenz/jgralab/greql/GreqlSchema.tg" />
	<property name="gruml.schemafile" value="${src.dir}/de/uni_koblenz/jgralab/schema/GrumlSchema.tg" />
	<property name="gretl.templategraphschemafile" value="${src.dir}/de/uni_koblenz/jgralab/gretl/templateGraphSchema.tg" />

	<!-- the directory location for the testschemas -->
	<property name="testschemas.dir" value="${testcases.dir}/testschemas" />

	<!-- compile src.dir and include statements for the targets
	     it is always "targetname.src" and "targetname.includes" -->
	<property name="core.src" value="${src.dir}/de/uni_koblenz/jgralab" />
	<property name="core.includes" value="*.java exception/** graphmarker/** schema/** impl/** algolib/functions/** eca/ECARuleManagerInterface.java" />

	<property name="pcollections.src" value="${src.dir}/org/pcollections" />

	<property name="tgtools.src" value="${src.dir}/de/uni_koblenz/jgralab/utilities" />
	<property name="tgtools.includes" value="tgschema2java/** ant/TgSchema2JavaTask.java ant/DeleteGeneratedSchemaTask.java tg2whatever/** tgmerge/**" />

	<property name="greql.src" value="${src.dir}/de/uni_koblenz/jgralab/greql" />

	<property name="gretl_eca.src" value="${src.dir}/de/uni_koblenz/jgralab/" />
	<property name="gretl_eca.includes" value="gretl/** eca/**" />

	<property name="algolib.src" value="${src.dir}/de/uni_koblenz/jgralab/algolib" />

	<property name="gruml.src" value="${src.dir}/de/uni_koblenz/jgralab/grumlschema/" />

	<property name="graphvalidator.src" value="${src.dir}/de/uni_koblenz/jgralab" />
	<property name="graphvalidator.includes" value="graphvalidator/**" />

	<property name="rsa.src" value="${src.dir}/de/uni_koblenz/jgralab/utilities" />
	<property name="rsa.includes" value="ant/Rsa2TgTask.java rsa2tg/** tg2schemagraph/**" />

	<property name="tg2dot.src" value="${src.dir}/de/uni_koblenz/jgralab/utilities" />
	<property name="tg2dot.includes" value="tg2dot/** tg2image/**" />

	<property name="common-tools.src" value="${src.dir}/de/uni_koblenz/jgralab/utilities" />
	<property name="common-tools.includes" value="common/**" />

	<property name="utilities.src" value="${src.dir}/de/uni_koblenz/jgralab/utilities" />
	<property name="utilities.includes" value="*/**" />
	<property name="utilities.excludes" value="tgschema2java/**" />

	<!-- The targets -->
	<target name="build" depends="clean,createClassesDir,ist_utilities,compile,modify_manifest,jar,sourcejar" />

	<target name="clean">
		<delete dir="${classes.dir}" />
		<delete file="${jar.dir}/jgralab.jar" />
		<delete dir="${tmp.dir}" />
		<delete dir="${testclasses.dir}" />
		<delete dir="${src.dir}/de/uni_koblenz/jgralab/greql/schema" />
		<delete dir="${src.dir}/de/uni_koblenz/jgralab/grumlschema" />
		<delete dir="${src.dir}/de/uni_koblenz/jgralab/gretl/template" />
		<delete dir="${testcases.dir}/de/uni_koblenz/jgralabtest/schemas" />
		<delete dir="${testcases.dir}/de/uni_koblenz/jgralabtest/gretl/schemas" />
		<delete file="${testschemas.dir}/greqltestschema.tg" />
		<delete dir="testit/testdata" />
	</target>

	<!-- ist_utilities -->
	<target name="ist_utilities">
		<javac fork="true" source="${javac.source}" target="${javac.target}" encoding="${javac.encoding}" srcdir="${src.dir}" includes="de/uni_koblenz/ist/utilities/**" destdir="${classes.dir}" memoryinitialsize="512m" memorymaximumsize="512m" classpathref="classpath" debug="${debug}" includeantruntime="false" />
	</target>

	<!-- compile -->
	<target name="compile" depends="pcollections,core,tgtools,greql,algolib,graphvalidator,rsa,utilities,gretl_and_eca,generatetestschemas">
		<mkdir dir="testit/testdata" />
	</target>

	<target name="pcollections" depends="createClassesDir">
		<javac fork="true" source="${javac.source}" target="${javac.target}" encoding="${javac.encoding}" srcdir="${pcollections.src}" excludes="${no_package_info}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" includeantruntime="false">
			<compilerarg line="-Xlint:unchecked" />
		</javac>
	</target>

	<!-- jgralab -->
	<!-- compiles jgralab basic sources -->
	<target name="core" depends="createClassesDir">
		<javac fork="true" source="${javac.source}" target="${javac.target}" encoding="${javac.encoding}" srcdir="${core.src}" includes="${core.includes}" excludes="${no_package_info}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" includeantruntime="false">
			<compilerarg line="-Xlint:unchecked" />
		</javac>
	</target>

	<!-- ant tasks for versioning -->
	<target name="versiontasks" depends="ist_utilities,createClassesDir">
		<javac fork="true" source="${javac.source}" target="${javac.target}" encoding="${javac.encoding}" srcdir="${tgtools.src}" includes="ant/RetrieveVersion.java ant/BumpMicroVersion.java ant/BumpMinorVersion.java" excludes="${no_package_info}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" includeantruntime="false" />
		<taskdef name="bump_micro" classname="de.uni_koblenz.jgralab.utilities.ant.BumpMicroVersion" classpath="${classes.dir}" />
		<taskdef name="bump_minor" classname="de.uni_koblenz.jgralab.utilities.ant.BumpMinorVersion" classpath="${classes.dir}" />
		<taskdef name="retrieve_version" classname="de.uni_koblenz.jgralab.utilities.ant.RetrieveVersion" classpath="${classes.dir}" />
	</target>

	<!-- tgtools (utils which are needed for schema creation (TgSchema2Java)
	         and that don't depend on schemas themselves) -->
	<target name="tgtools" depends="core">
		<javac fork="true" source="${javac.source}" target="${javac.target}" encoding="${javac.encoding}" srcdir="${tgtools.src}" includes="${tgtools.includes}" excludes="${no_package_info}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" includeantruntime="false">
			<compilerarg line="-Xlint:unchecked" />
		</javac>
		<taskdef name="tgschema2java" classname="de.uni_koblenz.jgralab.utilities.ant.TgSchema2JavaTask" classpathref="classpath" />
		<taskdef name="deletegeneratedschema" classname="de.uni_koblenz.jgralab.utilities.ant.DeleteGeneratedSchemaTask" classpath="${classes.dir}" />
	</target>

	<!-- compiles greql sources -->
	<target name="greql" depends="tgtools,algolib">
		<tgschema2java schemaFile="${greql.schemafile}" sourcePath="${src.dir}" />
		<javac fork="true" source="${javac.source}" target="${javac.target}" encoding="${javac.encoding}" srcdir="${greql.src}" excludes="${no_package_info}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" includeantruntime="false">
			<compilerarg line="-Xlint:unchecked" />
		</javac>
	</target>

	<target name="algolib" depends="core">
		<javac fork="true" source="${javac.source}" target="${javac.target}" encoding="${javac.encoding}" srcdir="${algolib.src}" excludes="${no_package_info}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" includeantruntime="false">
			<compilerarg line="-Xlint:unchecked" />
		</javac>
	</target>

	<!-- graphvalidator -->
	<target name="graphvalidator" depends="greql">
		<javac fork="true" source="${javac.source}" target="${javac.target}" encoding="${javac.encoding}" srcdir="${graphvalidator.src}" includes="${graphvalidator.includes}" excludes="${no_package_info}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" includeantruntime="false">
			<compilerarg line="-Xlint:unchecked" />
		</javac>
	</target>

	<target name="rsa" depends="tg2dot,gruml,graphvalidator">
		<javac fork="true" source="${javac.source}" target="${javac.target}" encoding="${javac.encoding}" srcdir="${rsa.src}" includes="${rsa.includes}" excludes="${no_package_info}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" includeantruntime="false">
			<compilerarg line="-Xlint:unchecked" />
		</javac>
		<taskdef classpathref="classpath" name="rsa2tg" classname="de.uni_koblenz.jgralab.utilities.ant.Rsa2TgTask" />
	</target>

	<target name="tg2dot" depends="gruml,graphvalidator,greql,common-tools">
		<javac fork="true" source="${javac.source}" target="${javac.target}" encoding="${javac.encoding}" srcdir="${tg2dot.src}" includes="${tg2dot.includes}" excludes="${no_package_info}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" includeantruntime="false">
			<compilerarg line="-Xlint:unchecked" />
		</javac>
	</target>

	<target name="common-tools">
		<javac fork="true" source="${javac.source}" target="${javac.target}" encoding="${javac.encoding}" srcdir="${common-tools.src}" includes="${common-tools.includes}" excludes="${no_package_info}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" includeantruntime="false">
			<compilerarg line="-Xlint:unchecked" />
		</javac>
	</target>

	<!-- compiles utility sources -->
	<target name="utilities" depends="rsa,gruml,xmlschema">
		<javac fork="true" source="${javac.source}" target="${javac.target}" encoding="${javac.encoding}" srcdir="${utilities.src}" includes="${utilities.includes}" excludes="${utilities.excludes} ${no_package_info}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" includeantruntime="false">
			<compilerarg line="-Xlint:unchecked" />
		</javac>
	</target>

	<!-- generates the xml graph schema -->
	<target name="xmlschema" depends="tgtools,greql">
		<tgschema2java schemaFile="${src.dir}/de/uni_koblenz/jgralab/utilities/xml2tg/XMLSchema.tg" sourcePath="${src.dir}" />
	</target>

	<!-- generates the gruml schema and compiles it -->
	<target name="gruml" depends="tgtools,greql">
		<tgschema2java schemaFile="${gruml.schemafile}" sourcePath="${src.dir}" />
		<javac fork="true" source="${javac.source}" target="${javac.target}" encoding="${javac.encoding}" srcdir="${gruml.src}" excludes="${no_package_info}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" includeantruntime="false">
			<compilerarg line="-Xlint:unchecked" />
		</javac>
	</target>

	<!-- generates the schemas required for test cases without compiling them -->
	<target name="generatetestschemas" depends="tgtools">
		<taskdef classpathref="classpath" name="rsa2tg" classname="de.uni_koblenz.jgralab.utilities.ant.Rsa2TgTask" />
		<!--
   	  <taskdef name="tgschema2java" classname="de.uni_koblenz.jgralab.utilities.ant.TgSchema2JavaTask" classpath="${classes.dir}" />
-->
		<rsa2tg xmifile="${testschemas.dir}/rsa-xmi/greqltestschema.xmi" schemafile="${testschemas.dir}/greqltestschema.tg" />
		<!-- The jgralab & greql test schemas -->
		<tgschema2java sourcePath="${testcases.dir}">
			<fileset dir="${testschemas.dir}" includes="*.tg" />
		</tgschema2java>
		<!-- The GReTL test schemas -->
		<tgschema2java sourcePath="${testcases.dir}">
			<fileset dir="${testschemas.dir}/gretl" includes="*.tg" />
		</tgschema2java>
		<!-- The ECA test schemas -->
		<tgschema2java sourcePath="${testcases.dir}">
			<fileset dir="${testschemas.dir}/eca" includes="*.tg" />
		</tgschema2java>
	</target>

	<!-- GReTL and ECA -->
	<target name="gretl_and_eca" depends="greql">
		<tgschema2java schemaFile="${gretl.templategraphschemafile}" sourcePath="${src.dir}" />
		<javac fork="true" source="${javac.source}" target="${javac.target}" encoding="${javac.encoding}" srcdir="${gretl_eca.src}" includes="${gretl_eca.includes}" excludes="${no_package_info}" destdir="${classes.dir}" memoryinitialsize="${minmemsize}" memorymaximumsize="${maxmemsize}" classpathref="classpath" debug="${debug}" includeantruntime="false">
			<compilerarg line="-Xlint:unchecked" />
		</javac>
	</target>

	<!-- unjar -->
	<!-- prepares additional common libraries to be added to the jar file -->
	<target name="unjar" depends="common.unjar">
		<!--
		<unjar_mp dest="${tmp.dir}">
			<fileset dir="${lib.dir}/apache/commons/cli/" includes="**/*.jar" />
		</unjar_mp>
-->
		<copy todir="${tmp.dir}/META-INF" file="${project.dir}/LICENSE" />
	</target>

	<target name="modify_manifest" depends="versiontasks">
		<!-- sets the attribute "revision" -->
		<retrieve_version />
		<manifest file="${manifest.file}" mode="update">
			<attribute name="Bundle-Version" value="${version}.${version.codename}" />
			<attribute name="Main-Class" value="${main.fq}" />
			<section name="de/uni_koblenz/jgralab/">
				<attribute name="Implementation-Title" value="JGraLab" />
				<attribute name="Implementation-Version" value="${version}@${version.codename}@${version.head}" />
				<attribute name="Implementation-Vendor" value="University of Koblenz, Institute for Software Technology" />
			</section>
		</manifest>
	</target>

	<!-- release -->
	<!-- calls targets modify, clean, jar, test and document -->
	<target name="release" depends="cleanall,bumpmicro,build,document" />

	<target name="bumpmicro_internal" depends="versiontasks">
		<bump_micro />
	</target>

	<target name="bumpmicro" depends="bumpmicro_internal,modify_manifest" />

	<target name="bumpminor_internal" depends="versiontasks">
		<bump_minor />
	</target>

	<target name="bumpminor" depends="bumpminor_internal,modify_manifest" />

	<target name="testcompile" depends="generatetestschemas,common.testcompile" />

	<!-- test -->
	<!-- run the test suite specified by test.suite -->
	<target name="test" if="test.suite" depends="testcompile">
		<mkdir dir="${testresults.dir}" />
		<echo>Starting the test...</echo>
		<junit fork="yes" forkmode="perTest" maxmemory="${maxmemsize}" printsummary="on" showoutput="true" outputtoformatters="true">
			<jvmarg value="-enableassertions" />
			<classpath>
				<path refid="testclasspath" />
			</classpath>
			<formatter type="${test.formattertype}" />
			<test name="${test.suite}" todir="${testresults.dir}" />
		</junit>
	</target>

	<target name="manualtest" if="manual.test.suite">
		<mkdir dir="${testresults.dir}" />
		<echo>Starting the test...</echo>
		<junit fork="yes" forkmode="perTest" maxmemory="${maxmemsize}" printsummary="on" showoutput="true" outputtoformatters="true">
			<jvmarg value="-enableassertions" />
			<classpath>
				<path refid="testclasspath" />
			</classpath>
			<formatter type="${test.formattertype}" />
			<test name="${manual.test.suite}" todir="${testresults.dir}" />
		</junit>
	</target>

	<!-- Push a new jgralab source jar to clojars.org -->
	<target name="clojars-push" depends="versiontasks">
		<retrieve_version />
		<exec executable="cp">
			<!-- Copy src-jar to jgralab.jar since clojars expects
		 jgralab.jar or jgralab-x.y.z.jar, but not
		 jgralab.src.jar -->
			<arg value="build/jar/jgralab.src.jar" />
			<arg value="jgralab.jar" />
		</exec>
		<exec executable="lein">
			<arg value="deploy" />
			<arg value="clojars" />
			<arg value="de.uni-koblenz.ist/jgralab" />
			<arg value="${version}" />
			<arg value="pom.xml" />
			<arg value="jgralab.jar" />
		</exec>
		<exec executable="rm">
			<arg value="jgralab.jar" />
		</exec>
	</target>

</project>

