// JGraLab - The Java Graph Laboratory
//
// Copyright (C) 2006-2014 Institute for Software Technology
//                         University of Koblenz-Landau, Germany
//                         ist@uni-koblenz.de
//
// For bug reports, documentation and further information, visit
//
//                         https://github.com/jgralab/jgralab
//
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3 of the License, or (at your
// option) any later version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
// Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, see <http://www.gnu.org/licenses>.
//
// Additional permission under GNU GPL version 3 section 7
//
// If you modify this Program, or any covered work, by linking or combining
// it with Eclipse (or a modified version of that program or an Eclipse
// plugin), containing partsts covered by the terms of the Eclipse Public
// License (EPL), the licensors of this Program grant you additional
// permission to convey the resulting work.  Corresponding Source for a
// non-source form of such a combination shall include the source code for
// the parts of JGraLab used as well as that of the covered work.

TGraph 2;
Schema de.uni_koblenz.jgralab.greql.schema.GreqlSchema;
GraphClass GreqlGraph;

EnumDomain IterationType (STAR, PLUS);
EnumDomain QuantificationType (FORALL, EXISTS, EXISTSONE);
EnumDomain GReQLDirection (IN, OUT, INOUT);
RecordDomain SourcePosition (offset:Integer, length: Integer);

// A common superclass for all vertices of GReQL2-vertices
abstract VertexClass GreqlVertex;

VertexClass AlternativePathDescription: PathDescription;
VertexClass BackwardVertexSet: PathExpression;
VertexClass ListComprehension: ComprehensionWithTableHeader;
VertexClass BoolLiteral: Literal { boolValue: Boolean };
VertexClass ConditionalExpression: Expression;
VertexClass Declaration: GreqlVertex;
VertexClass Definition: GreqlVertex;
VertexClass Direction: GreqlVertex { dirValue: GReQLDirection };
VertexClass EdgePathDescription: PrimaryPathDescription;
VertexClass EdgeRestriction: GreqlVertex;
VertexClass EdgeSetExpression: ElementSetExpression;
VertexClass ExponentiatedPathDescription: PathDescription;
VertexClass ForwardVertexSet: PathExpression;
VertexClass FunctionApplication: Expression;
VertexClass FunctionId: Identifier;
VertexClass GreqlExpression: GreqlVertex { importedTypes: Set<String>, queryText: String, optimizer: String };
VertexClass Identifier : Expression { name: String };
VertexClass IntLiteral: Literal { intValue: Integer };
VertexClass LongLiteral: Literal { longValue: Long };
VertexClass IntermediateVertexPathDescription: PathDescription;
VertexClass IteratedPathDescription: PathDescription { times: IterationType };
VertexClass LetExpression: DefinitionExpression;
VertexClass ListConstruction: ValueConstruction;
VertexClass ListRangeConstruction: ListConstruction;
VertexClass Literal: Expression;
VertexClass MapConstruction : ValueConstruction;
VertexClass MapComprehension : Comprehension;
VertexClass UndefinedLiteral: Literal;
VertexClass OptionalPathDescription: PathDescription;
VertexClass PathExistence: PathExpression;
VertexClass QuantifiedExpression: Expression;
VertexClass Quantifier: GreqlVertex { type: QuantificationType };
VertexClass DoubleLiteral: Literal { doubleValue: Double };
VertexClass RecordConstruction: ValueConstruction;
VertexClass RecordElement: GreqlVertex;
VertexClass RecordId: Identifier;
abstract VertexClass TypeOrRoleId: Identifier;
VertexClass RoleId: TypeOrRoleId;
VertexClass SequentialPathDescription: PathDescription;
VertexClass SetComprehension: Comprehension;
VertexClass SetConstruction: ValueConstruction;
VertexClass SimpleDeclaration: GreqlVertex;
VertexClass SimplePathDescription: PrimaryPathDescription;
VertexClass AggregationPathDescription: PrimaryPathDescription {outAggregation: Boolean};
VertexClass StringLiteral: Literal { stringValue: String };
abstract VertexClass ThisLiteral: Literal,Variable;
VertexClass ThisVertex: ThisLiteral;
VertexClass ThisEdge: ThisLiteral;
VertexClass TransposedPathDescription: PathDescription;
VertexClass TupleConstruction: ValueConstruction;
VertexClass TypeId: TypeOrRoleId { excluded: Boolean, type: Boolean };
VertexClass Variable: Identifier;
VertexClass VertexSetExpression: ElementSetExpression;
VertexClass WhereExpression: DefinitionExpression;
abstract VertexClass SubgraphDefinition : GreqlVertex;
VertexClass SubgraphRestrictedExpression : Expression;
VertexClass EdgeTypeSubgraph : SubgraphDefinition;
VertexClass VertexTypeSubgraph : SubgraphDefinition;
VertexClass ExpressionDefinedSubgraph : SubgraphDefinition;
abstract VertexClass Comprehension: Expression;
abstract VertexClass ComprehensionWithTableHeader: Comprehension;
abstract VertexClass DefinitionExpression: Expression;
abstract VertexClass ElementSetExpression: Expression;
abstract VertexClass Expression: GreqlVertex;
abstract VertexClass PathDescription: Expression;
abstract VertexClass PathExpression: Expression;
abstract VertexClass PrimaryPathDescription: PathDescription;
abstract VertexClass SubgraphExpression: Expression;
abstract VertexClass ValueConstruction: Expression;

// A common super-class for all Edges that connect PathDescription vertices

abstract EdgeClass IsPathDescriptionOf : GreqlAggregation from PathDescription (0,*) aggregation shared to PathDescription(0,*) ;

EdgeClass IsAlternativePathOf: IsPathDescriptionOf from PathDescription (2,*) role alternatePath aggregation shared to AlternativePathDescription (0,*);
EdgeClass IsArgumentOf: GreqlAggregation from Expression (0,*) role argument aggregation shared to FunctionApplication (0,*);
EdgeClass IsBoundExprOfDefinition: IsBoundExprOf from Expression (1,1) role boundExprOfDefinition aggregation shared to DefinitionExpression (0,1);
EdgeClass IsBoundExprOfQuantifiedExpression: IsBoundExprOf from Expression (1,1) role boundExprOfQuantifier aggregation shared to QuantifiedExpression (0,*);
EdgeClass IsBoundVarOf: GreqlAggregation from Variable (0,*) role boundVar aggregation shared to GreqlExpression (0,1);
EdgeClass IsCompDeclOf: GreqlAggregation from Declaration (1,1) role compDecl aggregation shared to Comprehension (0,1);
// zero or one, cause MapComprehensions don't have a compResultDef but keyExpr, and valueExpr.
EdgeClass IsCompResultDefOf: GreqlAggregation from Expression (0,1) role compResultDef aggregation shared to Comprehension (0,*);
EdgeClass IsConditionOf: GreqlAggregation from Expression (1,1) role condition aggregation shared to ConditionalExpression (0,*);
EdgeClass IsConstraintOf: GreqlAggregation from Expression (0,*) role constraint aggregation shared to Declaration (0,*);
EdgeClass IsDeclaredVarOf: GreqlAggregation from Variable (1,*) role declaredVar aggregation shared to SimpleDeclaration (0,1);
EdgeClass IsDefinitionOf: GreqlAggregation from Definition (1,*) role definition aggregation shared to DefinitionExpression (1,*);
EdgeClass IsDirectionOf: GreqlAggregation from Direction (1,1) role direction aggregation shared to PrimaryPathDescription (1,*);
EdgeClass IsEdgeExprOf: GreqlAggregation from Expression (1,1) role edgeExpr aggregation shared to EdgePathDescription (0,*);
EdgeClass IsEdgeRestrOf: GreqlAggregation from EdgeRestriction (0,*) role edgeRestr aggregation shared to PrimaryPathDescription (0,*);
EdgeClass IsExponentOf: GreqlAggregation from IntLiteral (1,1) role exponent aggregation shared to ExponentiatedPathDescription (0,*);
EdgeClass IsExponentiatedPathOf: IsPathDescriptionOf from PathDescription (1,1) role exponentiatedPath aggregation shared to ExponentiatedPathDescription (0,*);
EdgeClass IsExprOf:GreqlAggregation from Expression (1,1) role expr aggregation shared to Definition (0,*);
EdgeClass IsFalseExprOf: GreqlAggregation from Expression (1,1) role falseExpr aggregation shared to ConditionalExpression (0,*);
EdgeClass IsFirstValueOf: GreqlAggregation from Expression (1,1) role firstValue aggregation shared to ListRangeConstruction (0,*);
EdgeClass IsFunctionIdOf: GreqlAggregation from FunctionId (1,1) role functionId  aggregation shared to FunctionApplication (1,*);
EdgeClass IsGoalRestrOf: GreqlAggregation from Expression (0,*) role goalRestr aggregation shared to PathDescription (0,*);
EdgeClass IsIdOfStoreClause: GreqlAggregation from Identifier (0,1) role identifier aggregation shared to GreqlExpression (0,*);
EdgeClass IsIntermediateVertexOf: GreqlAggregation from Expression (1,1) role intermediateVertex aggregation shared to IntermediateVertexPathDescription (0,*);
EdgeClass IsIteratedPathOf: IsPathDescriptionOf from PathDescription (1,1) role iteratedPath aggregation shared to IteratedPathDescription (0,*);
EdgeClass IsLastValueOf: GreqlAggregation from Expression (1,1) role lastValue aggregation shared to ListRangeConstruction (0,*);
EdgeClass IsMaxCountExpressionOf: GreqlAggregation from Expression (0,1) role maxCount aggregation shared to Comprehension (0,*);
EdgeClass IsOptionalPathOf: IsPathDescriptionOf from PathDescription (1,1) role optionalPath aggregation shared to OptionalPathDescription (0,*);
EdgeClass IsPartOf: GreqlAggregation from Expression (0,*) role part aggregation shared to ValueConstruction (0,*);
EdgeClass IsPathOf: GreqlAggregation from Expression (1,1) role path aggregation shared to PathExpression (0,*);
EdgeClass IsQuantifiedDeclOf: GreqlAggregation from Declaration (1,1) role quantifiedDecl aggregation shared to QuantifiedExpression (0,1);
EdgeClass IsQuantifierOf: GreqlAggregation from Quantifier (1,1) role quantifier aggregation shared to QuantifiedExpression (1,*);
EdgeClass IsQueryExprOf: GreqlAggregation from Expression (1,1) role queryExpr aggregation shared to GreqlExpression (0,*);
EdgeClass IsRecordElementOf: GreqlAggregation from RecordElement (1,*) role recordElement aggregation shared to RecordConstruction (1,*);
EdgeClass IsRecordExprOf: GreqlAggregation from Expression (1,1) role recordExpr aggregation shared to RecordElement (0,*);
EdgeClass IsRecordIdOf: GreqlAggregation from RecordId (1,1) role recordId aggregation shared to RecordElement (1,*);
EdgeClass IsRoleIdOf: GreqlAggregation from RoleId (0,*) role roleId aggregation shared to EdgeRestriction (1,*);
EdgeClass IsBooleanPredicateOfEdgeRestriction: GreqlAggregation from Expression (0,1) role booleanPredicate aggregation shared to EdgeRestriction (0,1);
EdgeClass IsSequenceElementOf: IsPathDescriptionOf from PathDescription (2,*) role sequenceElement aggregation shared to SequentialPathDescription (0,*);
EdgeClass IsSimpleDeclOf: GreqlAggregation from SimpleDeclaration (1,*) role simpleDecl aggregation shared to Declaration (1,1);
EdgeClass IsStartExprOf: GreqlAggregation from Expression (0,1) role startExpr aggregation shared to PathExpression (0,*);
EdgeClass IsStartRestrOf: GreqlAggregation from Expression (0,*) role startRestr aggregation shared to PathDescription (0,*);
EdgeClass IsSubPathOf: IsPathDescriptionOf from PathDescription (2,2) role subPath aggregation shared to IntermediateVertexPathDescription (0,*);
EdgeClass IsSubgraphDefinitionOf: GreqlAggregation from SubgraphDefinition (0,1) role subgraphDefinition aggregation shared to SubgraphRestrictedExpression (0,*);
EdgeClass IsSubgraphDefiningExpression : GreqlAggregation from Expression (0,1) role definingExpression aggregation shared to ExpressionDefinedSubgraph (0,*);
EdgeClass IsExpressionOnSubgraph: GreqlAggregation from Expression (0,1) role restrictedExpression aggregation shared to SubgraphRestrictedExpression (0,*);
EdgeClass IsTableHeaderOf: GreqlAggregation from Expression (0,*) role tableHeader aggregation shared to ComprehensionWithTableHeader (0,*);
EdgeClass IsTargetExprOf: GreqlAggregation from Expression (0,1) role targetExpr aggregation shared to PathExpression (0,*);
EdgeClass IsKeyExprOfConstruction: GreqlAggregation from Expression (0,*) role keyExpr aggregation shared to MapConstruction (0,*);
EdgeClass IsValueExprOfConstruction: GreqlAggregation from Expression (0,*) role valueExpr aggregation shared to MapConstruction (0,*);
EdgeClass IsKeyExprOfComprehension : GreqlAggregation from Expression (1,1) role keyExpr aggregation shared to MapComprehension (0,*);
EdgeClass IsValueExprOfComprehension : GreqlAggregation from Expression (1,1) role valueExpr aggregation shared to MapComprehension (0,*);
EdgeClass IsTransposedPathOf: IsPathDescriptionOf from PathDescription (1,1) role transposedPath aggregation shared to TransposedPathDescription (0,*);
EdgeClass IsTrueExprOf: GreqlAggregation from Expression (1,1) role trueExpr aggregation shared to ConditionalExpression (0,*);
EdgeClass IsTypeExprOfDeclaration: IsTypeExprOf from Expression (0,1) role typeExpr aggregation shared to SimpleDeclaration (0,*);
EdgeClass IsTypeExprOfFunction: IsTypeExprOf from Expression (0,1) role typeExpr aggregation shared to FunctionApplication (0,*);
EdgeClass IsTypeIdOf: GreqlAggregation from TypeId (0,*) role typeId aggregation shared to EdgeRestriction (0,*);
EdgeClass IsTypeRestrOfExpression: GreqlAggregation from TypeId (0,*) role typeRestr aggregation shared to Expression (0,*);
EdgeClass IsTypeRestrOfSubgraph: GreqlAggregation from TypeId (0,*) role typeRestr aggregation shared to SubgraphDefinition (0,*);
EdgeClass IsVarOf: GreqlAggregation from Variable (1,1) role var aggregation shared to Definition (0,1);
abstract EdgeClass GreqlAggregation from GreqlVertex (0,*) aggregation shared to GreqlVertex (0,*) { sourcePositions: List<SourcePosition> } ;
abstract EdgeClass IsBoundExprOf: GreqlAggregation from Expression (1,1) aggregation shared to GreqlVertex (0,*);
abstract EdgeClass IsTypeExprOf: GreqlAggregation from Expression (0,*) aggregation shared to GreqlVertex (0,*);
