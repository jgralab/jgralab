// JGraLab - The Java Graph Laboratory
//
// Copyright (C) 2006-2012 Institute for Software Technology
//                         University of Koblenz-Landau, Germany
//                         ist@uni-koblenz.de
//
// For bug reports, documentation and further information, visit
//
//                         https://github.com/jgralab/jgralab
//
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3 of the License, or (at your
// option) any later version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
// Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, see <http://www.gnu.org/licenses>.
//
// Additional permission under GNU GPL version 3 section 7
//
// If you modify this Program, or any covered work, by linking or combining
// it with Eclipse (or a modified version of that program or an Eclipse
// plugin), containing parts covered by the terms of the Eclipse Public
// License (EPL), the licensors of this Program grant you additional
// permission to convey the resulting work.  Corresponding Source for a
// non-source form of such a combination shall include the source code for
// the parts of JGraLab used as well as that of the covered work.

TGraph 2;
Schema de.uni_koblenz.jgralabtest.schemas.vertextest.VertexTestSchema;
GraphClass VertexTestGraph;
abstract VertexClass AbstractSuperNode {name : String};
VertexClass SuperNode {number : Integer};
VertexClass SubNode : AbstractSuperNode;
VertexClass DoubleSubNode : SubNode, SuperNode {nodeMap : Map<Integer, String>};
EdgeClass Link from AbstractSuperNode (0,*) role source to SuperNode (0,*) role target {aString: String};
EdgeClass LinkBack from SuperNode (0,*) role sourceb to AbstractSuperNode (0,*) role targetb aggregation shared;
EdgeClass SubLink: Link from DoubleSubNode (0,*) role sourcec to SuperNode (0,*) role targetc {anInt: Integer};

VertexClass A;
VertexClass B;
VertexClass C: A;
VertexClass D: B;
VertexClass C2: C;
VertexClass D2: D;
EdgeClass E from A (0,*) role sourceE to B (0,*) role x;
EdgeClass F: E from C (0,*) role sourceF to D (1,3) role y;
EdgeClass G: E from C (0,*) role sourceG to D (1,3) role z;
EdgeClass H: E from A (0,*) role sourceH to B (1,4) role w;
EdgeClass I from A (0,*) role sourceI to A (0,*) role v;
EdgeClass J: E from C2 (0,*) role sourceJ to D2 (1,3) role u;
EdgeClass K: H from A (0,*) role sourceK to B (2,3) role targetK;
