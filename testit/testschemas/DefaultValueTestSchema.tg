// JGraLab - The Java Graph Laboratory
//
// Copyright (C) 2006-2012 Institute for Software Technology
//                         University of Koblenz-Landau, Germany
//                         ist@uni-koblenz.de
//
// For bug reports, documentation and further information, visit
//
//                         https://github.com/jgralab/jgralab
//
// This program is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3 of the License, or (at your
// option) any later version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General
// Public License for more details.
//
// You should have received a copy of the GNU General Public License along
// with this program; if not, see <http://www.gnu.org/licenses>.
//
// Additional permission under GNU GPL version 3 section 7
//
// If you modify this Program, or any covered work, by linking or combining
// it with Eclipse (or a modified version of that program or an Eclipse
// plugin), containing parts covered by the terms of the Eclipse Public
// License (EPL), the licensors of this Program grant you additional
// permission to convey the resulting work.  Corresponding Source for a
// non-source form of such a combination shall include the source code for
// the parts of JGraLab used as well as that of the covered work.

//   Version : Dimetrodon
//   Revision: 3353
//   Build ID: 69

TGraph 2;
Schema de.uni_koblenz.jgralabtest.schemas.defaultvaluetestschema.DefaultValueTestSchema;
GraphClass DefaultValueTestGraph { boolGraph: Boolean =  "t",  complexListGraph: List<List<Boolean>> =  "[[t][f][t]]",  complexMapGraph: Map<List<Boolean>, Set<Boolean>> =  "{[t]-{t}[f]-{f}}",  complexSetGraph: Set<Set<Boolean>> =  "{{t}{f}}",  doubleGraph: Double =  "1.1",  enumGraph: .TestEnumDomain =  "FIRST",  intGraph: Integer =  "1",  listGraph: List<Boolean> =  "[t f t]",  longGraph: Long =  "1",  mapGraph: Map<Integer, Boolean> =  "{1 - t 2 - f 3 - t}",  recordGraph: .TestRecordDomain =  "(t 1.1 FIRST 1[t f t]1{1 - t 2 - f 3 - t}{t f}\"test\")",  setGraph: Set<Boolean> =  "{t f}",  stringGraph: String =  "\"test\"" };
EnumDomain TestEnumDomain ( FIRST, SECOND, THIRD );
RecordDomain TestRecordDomain ( boolRecord: Boolean, doubleRecord: Double, enumRecord: TestEnumDomain, intRecord: Integer, listRecord: List<Boolean>, longRecord: Long, mapRecord: Map<Integer, Boolean>, setRecord: Set<Boolean>, stringRecord: String );
VertexClass TestSubVertex: TestVertex;
VertexClass TestVertex { boolVertex: Boolean =  "t",  complexListVertex: List<List<Boolean>> =  "[[t][f][t]]",  complexMapVertex: Map<List<Boolean>, Set<Boolean>> =  "{[t]-{t}[f]-{f}}",  complexSetVertex: Set<Set<Boolean>> =  "{{t}{f}}",  doubleVertex: Double =  "1.1",  enumVertex: TestEnumDomain =  "FIRST",  intVertex: Integer =  "1",  listVertex: List<Boolean> =  "[t f t]",  longVertex: Long =  "1",  mapVertex: Map<Integer, Boolean> =  "{1 - t 2 - f 3 - t}",  recordVertex: TestRecordDomain =  "(t 1.1 FIRST 1[t f t]1{1 - t 2 - f 3 - t}{t f}\"test\")",  setVertex: Set<Boolean> =  "{t f}",  stringVertex: String =  "\"test\"" };
EdgeClass TestEdge from TestVertex (0,*) role start to TestVertex (0,*) role end { boolEdge: Boolean =  "t",  complexListEdge: List<List<Boolean>> =  "[[t][f][t]]",  complexMapEdge: Map<List<Boolean>, Set<Boolean>> =  "{[t]-{t}[f]-{f}}",  complexSetEdge: Set<Set<Boolean>> =  "{{t}{f}}",  doubleEdge: Double =  "1.1",  enumEdge: TestEnumDomain =  "FIRST",  intEdge: Integer =  "1",  listEdge: List<Boolean> =  "[t f t]",  longEdge: Long =  "1",  mapEdge: Map<Integer, Boolean> =  "{1 - t 2 - f 3 - t}",  recordEdge: TestRecordDomain =  "(t 1.1 FIRST 1[t f t]1{1 - t 2 - f 3 - t}{t f}\"test\")",  setEdge: Set<Boolean> =  "{t f}",  stringEdge: String =  "\"test\"" };
